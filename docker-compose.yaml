version: "3.9"

services:
  backend:
    depends_on:
      - redis
      - postgres
    expose:
      - ${BACKEND_PORT_INTERNAL}
    build:
        context: ./backend
        dockerfile: Dockerfile
    volumes:
      - ./backend/:/code
    environment:
      - REDIS_PORT=${REDIS_PORT_INTERNAL}
      - REDIS_HOST=redis
      - SECRET_KEY=${SECRET_KEY}
      - ALGORITHM=${ALGORITHM}
      - PROJECT_NAME=${PROJECT_NAME}
      - CORS_ORIGINS=${BACKEND_CORS_ORIGINS}
      - DEBUG=${BACKEND_DEBUG}
      - DOMAIN=${DOMAIN}
      - ACCESS_TOKEN_EXPIRE_SECONDS=${ACCESS_TOKEN_EXPIRE_SECONDS}
      - SMTP_USER=${SMTP_USER}
      - SMTP_PASSWORD=${SMTP_PASSWORD}
      - EMAILS_FROM_EMAIL=${EMAILS_FROM_EMAIL}
      - SMTP_PORT=${SMTP_PORT}
      - SMTP_HOST=${SMTP_HOST}
      - EMAIL_FROM_NAME=${EMAIL_FROM_NAME}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=postgres
    command: uvicorn main:app --host 0.0.0.0 --port ${BACKEND_PORT_INTERNAL} --reload --proxy-headers
    networks:
      - app-network

  frontend:
    depends_on:
      - backend
    build:
        context: ./frontend
        dockerfile: Dockerfile
    expose:
      - ${FRONTEND_PORT_INTERNAL}
    volumes:
      - ./frontend:/app
      - /app/node_modules
    command: "npm run dev"
    environment:
      - PORT=${FRONTEND_PORT_INTERNAL}
    networks:
      - app-network

  redis:
    image: redis:7.4.0-alpine
    expose:
      - ${REDIS_PORT_INTERNAL}
    networks:
      - app-network

  postgres:
    image: postgres:16.4-alpine
    ports:
      - ${POSTGRES_PORT}:${POSTGRES_PORT_INTERNAL}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    networks:
      - app-network

  nginx:
    image: nginx:1.27.3-alpine-slim
    depends_on:
      - frontend
      - backend
      - postgres
      - redis
      - mailhog
    volumes:
      - ./nginx/conf/nginx.conf:/etc/nginx/nginx.conf.template
      - ./nginx/certs/server.crt:/etc/nginx/server.crt
      - ./nginx/certs/server.key:/etc/nginx/server.key
    environment:
        - BACKEND_PORT_INTERNAL=${BACKEND_PORT_INTERNAL}
        - FRONTEND_PORT_INTERNAL=${FRONTEND_PORT_INTERNAL}
        - POSTGRES_PORT_INTERNAL=${POSTGRES_PORT_INTERNAL}
        - REDIS_PORT_INTERNAL=${REDIS_PORT_INTERNAL}
        - MAILHOG_UI_PORT_INTERNAL=${MAILHOG_UI_PORT_INTERNAL}
        - DOMAIN=${DOMAIN}
    entrypoint: >
      sh -c "
        envsubst '$$FRONTEND_PORT_INTERNAL $$BACKEND_PORT_INTERNAL $$MAILHOG_UI_PORT_INTERNAL $$DOMAIN' < /etc/nginx/nginx.conf.template > /etc/nginx/nginx.conf &&
        exec nginx -g 'daemon off;'
      "
    ports:
      - "${HTTP_PORT}:80"
      - "${HTTPS_PORT}:443"
    networks:
      - app-network

  mailhog:
    image: mailhog/mailhog:latest
    expose:
      - ${MAILHOG_UI_PORT_INTERNAL}
    ports:
      - ${MAILHOG_PORT}:${MAILHOG_PORT_INTERNAL}
    networks:
      - app-network

volumes:
  postgres_data:

networks:
  app-network:
    driver: bridge